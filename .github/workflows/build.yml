name: Build C++ Files

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up caching for build artifacts
        uses: actions/cache@v4
        with:
          path: build_cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Check if build directory exists
        id: build_dir
        run: |
          if [ -d "build_cache" ]; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Create build directory
        if: steps.build_dir.outputs.exists == 'false'
        run: mkdir -p build_cache

      - name: Compile C++ files on Linux/macOS
        if: runner.os != 'Windows'
        run: |
          # Find directories containing .h files and compile all .cpp files within them as a unit
          find . -type d | while read dir; do
            if find "$dir" -maxdepth 1 -name '*.h' | grep -q '.'; then
              # Compile all .cpp files in this directory
              output="build_cache/$(basename $dir)-${RUNNER_OS}.out"
              compile_command="g++ -std=c++11 -o $output $(find "$dir" -maxdepth 1 -name '*.cpp')"
              echo "Running command: $compile_command"
              if [[ ! -f "$output" || "$(find "$dir" -name '*.cpp' -newer "$output")" ]]; then
                eval $compile_command
              fi
            fi
          done

          # Compile standalone .cpp files not in directories with headers
          find . -name '*.cpp' | while read file; do
            dir=$(dirname "$file")
            if ! find "$dir" -maxdepth 1 -name '*.h' | grep -q '.'; then
              output="build_cache/$(basename ${file%.cpp})-${RUNNER_OS}.out"
              compile_command="g++ -std=c++11 -o $output $file"
              echo "Running command: $compile_command"
              if [[ ! -f "$output" || "$file" -nt "$output" ]]; then
                eval $compile_command
              fi
            fi
          done

      - name: Compile C++ files on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Find directories with .h files and compile all .cpp files within them as a unit
          Get-ChildItem -Recurse -Directory | ForEach-Object {
            if (Get-ChildItem -Path $_.FullName -Filter *.h) {
              # Compile all .cpp files in this directory
              $output = "build_cache/$($_.Name)-windows.exe"
              $cppFiles = (Get-ChildItem -Path $_.FullName -Filter *.cpp | ForEach-Object { $_.FullName }) -join ' '
              $compileCommand = "g++ $cppFiles -o $output"
              Write-Output "Running command: $compileCommand"
              if (!(Test-Path $output) -or (Get-ChildItem -Path $_.FullName -Filter *.cpp | Where-Object { $_.LastWriteTime -gt (Get-Item $output).LastWriteTime })) {
                Invoke-Expression $compileCommand
              }
            }
          }

          # Compile standalone .cpp files not in directories with headers
          Get-ChildItem -Recurse -Filter *.cpp | ForEach-Object {
            $dir = $_.DirectoryName
            if (-not (Get-ChildItem -Path $dir -Filter *.h)) {
              $output = "build_cache/$($_.BaseName)-windows.exe"
              $compileCommand = "g++ `"$($_.FullName)`" -o `"$output`""
              Write-Output "Running command: $compileCommand"
              if (!(Test-Path $output) -or ($_.LastWriteTime -gt (Get-Item $output).LastWriteTime)) {
                Invoke-Expression $compileCommand
              }
            }
          }

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries-${{ matrix.os }}
          path: build_cache/
